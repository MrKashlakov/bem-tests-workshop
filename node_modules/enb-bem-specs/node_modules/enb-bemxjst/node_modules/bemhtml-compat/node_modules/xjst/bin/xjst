#!/usr/bin/env node
var fs = require('fs');

require('coa').Cmd()
    .name(process.argv[1])
    .helpful()
    .opt()
        .name('version')
        .title('Version')
        .short('v')
        .long('version')
        .only()
        .flag()
        .act(function(opts) {
            // return message as result of action
            var package = require('fs').readFileSync(__dirname +
                                                     '/../package.json');
            return JSON.parse(package).version;
        })
        .end()
    .opt()
        .name('export-graph')
        .title('Export graph in graphviz compatible format')
        .long('export-graph')
        .end()
    .opt()
        .name('no-opt')
        .title('No optimization (just render locals and templates to js)')
        .long('no-opt')
        .flag()
        .end()
    .opt()
        .name('force-inline')
        .title('Force inlining')
        .long('force-inline')
        .flag()
        .end()
    .opt()
        .name('asyncify')
        .title('Asyncify code')
        .long('asyncify')
        .flag()
        .end()
    .opt()
        .name('profile-match')
        .title('Profile matching')
        .long('profile-match')
        .flag()
        .end()
    .opt()
        .name('uglify')
        .title('Minimize js output using uglifyjs')
        .short('u').long('uglify')
        .flag()
        .end()
    .opt()
        .name('merge')
        .title('Generate information required for merging templates')
        .short('m').long('merge')
        .flag()
        .end()
    .opt()
        .name('ghosts')
        .title('Generate ghosts of nodes with applies')
        .long('ghosts')
        .flag()
        .end()
    .opt()
        .name('engine')
        .title('Optimization engine (sort-group, or fullgen [sort-group])')
        .short('e').long('engine')
        .def('sort-group')
        .end()
    .opt()
        .name('input').title('Input file (default: stdin)')
        .short('i').long('input')
        .input()
        .end()
    .opt()
        .name('output').title('Output file (default: stdout)')
        .short('o').long('output')
        .output()
        .end()
    .act(function(options) {
      return require('../lib/xjst').run(options);
    })
    .run();
