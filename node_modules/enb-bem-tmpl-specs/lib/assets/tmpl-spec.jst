var assert = require('assert'),
    path = require('path'),
<% if (saveHtml) { %>
    fs = require('fs'),
    beautifyHtml = function(html) {
        return require('${ paths['js-beautify'] }').html(html, beautifyHtmlConfig);
    },
    beautifyHtmlConfig = { unformatted: [
    'a', 'span', 'img', 'address', 'script',
    'h1', 'h2', 'h3', 'h4', 'h5','h6',
    'dfn', 'code', 'samp', 'kbd', 'var',
    'cite', 'abbr', 'acronym', 'strong',
    'sub', 'sup', 'tt', 'big', 'small', 'strike',
    'font', 'ins', 'del', 'pre', 'address', 'dt',
    'q', 'i', 'b', 'u', 's', 'bdo', 'em'
    ]},
    saveHtmlFile = function(filename, actual, done) {
        fs.writeFile(path.join(__dirname, filename), beautifyHtml(actual), done);
    },
<% } %>
    clearRequire = require('${ paths['clear-require'] }'),
    HtmlDiffer = require('${ paths['html-differ'] }').HtmlDiffer,
    htmlDiffer = new HtmlDiffer(${ JSON.stringify(diffOpts) }),
    referencesFilename = require.resolve('${ paths.references }');

describe('${ describe }', function() {
    var engines = {},
        references;

    beforeEach(function () {
        // reload references
        clearRequire(referencesFilename);
        references = require(referencesFilename);
    });

<% if (!(langs && langs.length)) { %>
    //
    // no langs mode
    //

    beforeEach(function () {
        // reload engines artifacts
        engines = {};
        <% _.forEach(engines, function(engine) {
            reRequire('engines', engine);
        }); %>
    });

    <% _.forEach(its, function(it) { %>
    describe('${ it }', function() {

        <% _.forEach(engines, function(engine) {
            print(template('it', {
                it: it,
                engine: engine,
                lang: null,
                saveHtml: saveHtml
            }));
        }); %>

    }); // describe ${ it }
    <% }); // _.forEach its %>

<% } else { // langs.length > 0 %>
    //
    // langs mode
    //

    <% _.forEach(langs, function (lang) { %>
    describe('with lang `${ lang }`', function() {

        beforeEach(function () {
            <% _.forEach(engines, function(engine) {
                var engineObject = 'engines[\'' + engine.name + '\']';
                print(engineObject + ' = {};\n');
                reRequire(engineObject, engine.langs.filter(function (_lang) { return lang === _lang.name; })[0]);
            }); %>
        });

        <% _.forEach(its, function(it) { %>
        describe('${ it }', function() {

            <% _.forEach(engines, function(engine) {
                print(template('it', {
                    it: it,
                    engine: engine,
                    lang: lang,
                    saveHtml: saveHtml
                }));
            }); %>

        });
        <% }); %>

    });
    <% }); %>

<% }; // /if langs %>

}); // /describe ${ describe }
<%
function reRequire(where, what) {
    var name = what.name,
        target = what.target,
        exportName = what.exportName;
    print('clearRequire(require.resolve(\'' + target + '\'));\n');
    print(where + '[\'' + name + '\'] = require(\'' + target + '\')' + exportName + ';\n');
}
%>
function assertHtml(actual, expected, done, filename) {
<% if (saveHtml) {%>
    saveHtmlFile(filename, actual, function() {
<% } %>
    if (htmlDiffer.isEqual(actual, expected)) {
        assert.ok(actual);
        done && done(null);
    } else {

            assert.fail(actual, expected, null, '\n');
    }
<% if (saveHtml) {%>
    });
<% } %>
}
